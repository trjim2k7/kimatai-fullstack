rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Itineraries collection - owners can read/write, collaborators can read/edit but not delete
    // Public can read shared itineraries
    match /itineraries/{itineraryId} {
      allow read: if 
        // Allow public read access to shared itineraries
        (resource.data.isShared == true) ||
        // Allow authenticated users to read their own itineraries or collaborations
        (request.auth != null && 
         (request.auth.uid == resource.data.ownerId || 
          request.auth.uid in resource.data.collaborators));
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId &&
        request.auth.uid in request.resource.data.collaborators;
      
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.ownerId || 
         request.auth.uid in resource.data.collaborators) &&
        // Prevent unauthorized changes to ownership and collaborators
        (request.auth.uid == resource.data.ownerId || 
         (request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.collaborators == resource.data.collaborators));
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Customer/Stripe collections - users can only access their own data
    match /customers/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /checkout_sessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /subscriptions/{subscriptionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Subscriptions are typically managed by Stripe webhooks, not client writes
        allow write: if false;
      }
    }
    
    // Deny all other document access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}